{
    "name": "fracturedjsonvsc",
    "displayName": "FracturedJson",
    "description": "A JSON formatter that produces human-readable but fairly compact output.",
    "publisher": "j-brooke",
    "version": "3.1.1",
    "engines": {
        "vscode": "^1.57.0"
    },
    "categories": [
        "Formatters"
    ],
    "keywords": [
        "JSON",
        "JSONC",
        "formatter",
        "pretty printer",
        "beautifier",
        "stringify",
        "compact",
        "comments"
    ],
    "repository": {
        "url": "https://github.com/j-brooke/FracturedJsonVSC"
    },
    "homepage": "https://j-brooke.github.io/FracturedJson/",
    "license": "MIT",
    "icon": "images/logo_256.png",
    "activationEvents": [
        "onCommand:fracturedjsonvsc.formatJsonDocument",
        "onCommand:fracturedjsonvsc.formatJsonSelection",
        "onCommand:fracturedjsonvsc.minifyJsonDocument",
        "onCommand:fracturedjsonvsc.nearMinifyJsonDocument",
        "onLanguage:json",
        "onLanguage:jsonc"
    ],
    "main": "./out/extension.js",
    "contributes": {
        "commands": [
            {
                "command": "fracturedjsonvsc.formatJsonDocument",
                "title": "Format JSON Document"
            },
            {
                "command": "fracturedjsonvsc.formatJsonSelection",
                "title": "Format JSON Selection"
            },
            {
                "command": "fracturedjsonvsc.minifyJsonDocument",
                "title": "Minify JSON Document"
            },
            {
                "command": "fracturedjsonvsc.nearMinifyJsonDocument",
                "title": "Near-minify JSON Document"
            }
        ],
        "configuration": {
            "title": "FracturedJson",
            "properties": {
                "fracturedjsonvsc.v3.MaxInlineLength": {
                    "type": "number",
                    "default": 999999999,
                    "description": "Maximum length of complex inline elements, not counting indentation.",
                    "order": 11
                },
                "fracturedjsonvsc.v3.MaxTotalLineLength": {
                    "type": "number",
                    "default": 80,
                    "description": "Maximum length of complex inline elements, including indentation.",
                    "order": 12
                },
                "fracturedjsonvsc.v3.MaxInlineComplexity": {
                    "type": "number",
                    "default": 2,
                    "description": "Maximum complexity for inline elements.",
                    "order": 21
                },
                "fracturedjsonvsc.v3.MaxCompactArrayComplexity": {
                    "type": "number",
                    "default": 1,
                    "description": "Maximum complexity for compact multiline arrays.",
                    "order": 22
                },
                "fracturedjsonvsc.v3.MaxTableRowComplexity": {
                    "type": "number",
                    "default": 2,
                    "description": "Maximum complexity for inlined elements formatted as a table.",
                    "order": 23
                },
                "fracturedjsonvsc.v3.MinCompactArrayRowItems": {
                    "type": "number",
                    "default": 3,
                    "description": "Minimum number of items per line (roughly) when formatting compact multiline arrays.",
                    "order": 24
                },
                "fracturedjsonvsc.v3.AlwaysExpandDepth": {
                    "type": "number",
                    "default": -1,
                    "description": "Depth at which lists/objects are always expanded regardless of other settings. -1=none, 0=root, etc.",
                    "order": 25
                },
                "fracturedjsonvsc.v3.CommentPolicyForJSON": {
                    "type": "string",
                    "default": "TreatAsError",
                    "description": "Determines how comments are handled in files identified by the editor as 'JSON' (not 'JSON with Comments').",
                    "enum": [
                        "TreatAsError",
                        "Remove",
                        "Preserve"
                    ],
                    "order": 31
                },
                "fracturedjsonvsc.v3.CommentPolicyForJSONC": {
                    "type": "string",
                    "default": "Preserve",
                    "description": "Determines how comments are handled in files identified by the editor as 'JSON with Comments'.",
                    "enum": [
                        "TreatAsError",
                        "Remove",
                        "Preserve"
                    ],
                    "order": 32
                },
                "fracturedjsonvsc.v3.NestedBracketPadding": {
                    "type": "boolean",
                    "default": true,
                    "description": "Insert spaces inside brackets for complex inlined types.",
                    "order": 41
                },
                "fracturedjsonvsc.v3.SimpleBracketPadding": {
                    "type": "boolean",
                    "default": false,
                    "description": "Insert spaces inside brackets for un-nested inlined types.",
                    "order": 42
                },
                "fracturedjsonvsc.v3.ColonPadding": {
                    "type": "boolean",
                    "default": true,
                    "description": "Insert spaces after colons.",
                    "order": 43
                },
                "fracturedjsonvsc.v3.CommaPadding": {
                    "type": "boolean",
                    "default": true,
                    "description": "Insert spaces after commas.",
                    "order": 44
                },
                "fracturedjsonvsc.v3.CommentPadding": {
                    "type": "boolean",
                    "default": true,
                    "description": "Insert spaces before/after comments (depending on their position).",
                    "order": 45
                },
                "fracturedjsonvsc.v3.OmitTrailingWhitespace": {
                    "type": "boolean",
                    "default": true,
                    "description": "Trims spaces/tabs at the ends of lines.",
                    "order": 46
                },
                "fracturedjsonvsc.v3.DontJustifyNumbers": {
                    "type": "boolean",
                    "default": false,
                    "description": "If true, numbers won't be right-aligned with matching precision.",
                    "order": 51
                },
                "fracturedjsonvsc.v3.PreserveBlankLines": {
                    "type": "boolean",
                    "default": false,
                    "description": "If true, blank lines from the original will be included in the formatted text.",
                    "order": 52
                },
                "fracturedjsonvsc.v3.AllowTrailingCommas": {
                    "type": "boolean",
                    "default": false,
                    "description": "If true, commas at then ends of arrays/objects won't be treated as errors.",
                    "order": 53
                },
                "fracturedjsonvsc.v3.StringWidthPolicy": {
                    "type": "string",
                    "default": "EastAsianFullWidth",
                    "description": "Determines how many spaces are added when aligning things as tables.",
                    "enum": [
                        "CharacterCount",
                        "EastAsianFullWidth",
                        "EastAsianTreatAmbiguousAsWide"
                    ],
                    "enumDescriptions": [
                        "Aligns tables based on simple character counts.",
                        "Aligns tables adjusting for East Asian FullWidth characters.",
                        "Aligns tables adjusting for East Asian FullWidth characters, treating ambiguous ones as wide."
                    ],
                    "order": 54
                }
            }
        }
    },
    "scripts": {
        "compile": "tsc -p ./",
        "watch": "tsc -watch -p ./",
        "pretest": "npm run compile && npm run lint",
        "lint": "eslint src --ext ts",
        "test": "node ./out/test/runTest.js",
        "vscode:prepublish": "npm run -S esbuild-base -- --minify",
        "esbuild-base": "esbuild ./src/extension.ts --bundle --outfile=out/extension.js --external:vscode --format=cjs --platform=node",
        "esbuild": "npm run -S esbuild-base -- --sourcemap",
        "esbuild-watch": "npm run -S esbuild-base -- --sourcemap --watch",
        "test-compile": "tsc -p ./"
    },
    "devDependencies": {
        "@types/glob": "^7.1.3",
        "@types/mocha": "^8.2.2",
        "@types/node": "14.x",
        "@types/vscode": "^1.57.0",
        "@typescript-eslint/eslint-plugin": "^4.26.0",
        "@typescript-eslint/parser": "^4.26.0",
        "esbuild": "^0.12.15",
        "eslint": "^7.27.0",
        "glob": "^7.1.7",
        "mocha": "^10.1.0",
        "typescript": "^4.3.2",
        "vscode-test": "^1.5.2"
    },
    "dependencies": {
        "@vscode/vsce": "^2.19.0",
        "fracturedjsonjs": "^3.1.0",
        "get-east-asian-width": "^1.2.0"
    }
}
